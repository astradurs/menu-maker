generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  uuid      String   @id @default(cuid())
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
  id        String   @unique @db.VarChar(50)
  name      String?  @db.VarChar(50)
  users     User[]
}

model User {
  uuid               String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  firstName          String?             @db.VarChar(255)
  lastName           String?             @db.VarChar(255)
  email              String              @unique @db.VarChar(255)
  roles              Role[]
  courses            Course[]
  courseTranslations CourseTranslation[]
  team               Team?                @relation(fields: [teamUuid], references: [uuid])
  teamUuid           String?
}

model Team {
  uuid               String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  id                 String              @unique @db.VarChar(50)
  domain             String?             @unique @db.VarChar(50)
  name               String              @db.VarChar(50)
  users              User[]
  courses            Course[]
  courseTranslations CourseTranslation[]
}

model Allergen {
  uuid        String       @id @default(cuid())
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamp(6)
  id          String       @unique @db.VarChar(30)
  name        String       @unique @db.VarChar(30)
  description String?
  source      String?
  ingredients Ingredient[]
  published   Boolean      @default(false)
  courses     Course[]
}

model Ingredient {
  uuid        String     @id @default(cuid())
  createdAt   DateTime   @default(now()) @db.Timestamp(6)
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  published   Boolean    @default(false)
  id          String     @unique @db.VarChar(30)
  name        String     @unique @db.VarChar(30)
  description String?
  source      String?
  allergens   Allergen[]
  courses     Course[]
}

model Language {
  uuid               String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  localeId           String              @unique @db.VarChar(8)
  name               String              @unique @db.VarChar(30)
  CourseTranslations CourseTranslation[]
}

model CourseTranslation {
  uuid        String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(6)
  published   Boolean  @default(false)
  course      Course   @relation(fields: [courseId], references: [uuid])
  courseId    String
  author      User     @relation(fields: [authorId], references: [uuid])
  authorId    String
  team        Team?     @relation(fields: [teamUuid], references: [uuid])
  teamUuid      String?
  language    Language @relation(fields: [languageId], references: [uuid])
  languageId  String   @db.VarChar(10)
  title       String
  description String?
}

model Course {
  uuid               String              @id @default(cuid())
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  published          Boolean             @default(false)
  teamUuid             String?
  team               Team?                @relation(fields: [teamUuid], references: [uuid])
  authorId           String
  author             User                @relation(fields: [authorId], references: [uuid])
  allergens          Allergen[]
  ingredients        Ingredient[]
  title              String
  description        String?
  CourseTranslations CourseTranslation[]
}
